Q1-Explain what the simple List component does.
Ans- List components are used to display data in an ordered fashion.

Q2-What problems/warnings are there with code?
Ans- The following problems were there with the code:

		-> _propTypes.default.shapeOf is not a function
		-> Calling PropTypes validators directly is not supported by the `prop-types` package.
		   Use `PropTypes.checkPropTypes()` to call them.
		-> Cannot read properties of null (reading 'map')
		-> setSelectedIndex is not a function

Q3-Please fix, optimize, and/or modify the component as much as you think is necessary.
Ans- I tried to resolve all the errors and warnings.The first mistake which I saw was shapeOf and array method whose spelling was wrong
	so I fixed that.Then the map was taking null values if the value was coming late.Lastly the again wrong function was called "setSelectedIndex"
	is used to access the data not change it.

	//CORRECT CODE

```jsx
import React, { useState, useEffect, memo } from 'react';
import PropTypes from 'prop-types';

// Single List Item
const WrappedSingleListItem = ({
  index,
  isSelected,
  onClickHandler,
  text,
}) => {
  return (
    <li
      style={{ backgroundColor: isSelected ? 'green' : 'red'}}
      onClick={onClickHandler(index)}
    >
      {text}
    </li>
  );
};

WrappedSingleListItem.propTypes = {
  index: PropTypes.number,
  isSelected: PropTypes.bool,
  onClickHandler: PropTypes.func.isRequired,
  text: PropTypes.string.isRequired,
};

const SingleListItem = memo(WrappedSingleListItem);

// List Component
const WrappedListComponent = ({
  items,
}) => {
  const [setSelectedIndex, selectedIndex] = useState();

  useEffect(() => {
    selectedIndex(null);
  }, [items]);

  const handleClick = index => {
    setSelectedIndex(index);
  };

  return (
    <ul style={{ textAlign: 'left' }}>
      {items?.map((item, index) => (
        <SingleListItem
          onClickHandler={() => handleClick(index)}
          text={item.text}
          index={index}
          isSelected={selectedIndex}
        />
      ))}
    </ul>
  )
};

WrappedListComponent.propTypes = {
  items: PropTypes.arrayOf(PropTypes.shape({
    text: PropTypes.string.isRequired,
  })),
};

WrappedListComponent.defaultProps = {
  items: null,
};

const List = memo(WrappedListComponent);

export default List;

```
